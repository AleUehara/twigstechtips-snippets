--- G:/Android/sdk/extras/google/play_billing/samples/TrivialDrive/src/com/example/android/trivialdrivesample/util/IabHelper.java	Fri Nov 29 18:55:07 2013
+++ G:/Android/projects/MustachifyEverything/src/twig/nguyen/common/services/billing/IabHelper.java	Fri Dec 20 12:24:09 2013
@@ -22,6 +22,7 @@
 import android.content.Intent;
 import android.content.IntentSender.SendIntentException;
 import android.content.ServiceConnection;
+import android.content.pm.ResolveInfo;
 import android.os.Bundle;
 import android.os.Handler;
 import android.os.IBinder;
@@ -80,6 +81,8 @@
     // Has this object been disposed of? (If so, we should ignore callbacks, etc)
     boolean mDisposed = false;
 
+    boolean mIsBound = false;
+
     // Are subscriptions supported?
     boolean mSubscriptionsSupported = false;
 
@@ -264,9 +267,11 @@
 
         Intent serviceIntent = new Intent("com.android.vending.billing.InAppBillingService.BIND");
         serviceIntent.setPackage("com.android.vending");
-        if (!mContext.getPackageManager().queryIntentServices(serviceIntent, 0).isEmpty()) {
+        List<ResolveInfo> ri = mContext.getPackageManager().queryIntentServices(serviceIntent, 0);
+
+        if (ri != null && !ri.isEmpty()) {
             // service available to handle that Intent
-            mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);
+            mIsBound = mContext.bindService(serviceIntent, mServiceConn, Context.BIND_AUTO_CREATE);
         }
         else {
             // no service available to handle that Intent
@@ -289,7 +294,9 @@
         mSetupDone = false;
         if (mServiceConn != null) {
             logDebug("Unbinding from service.");
-            if (mContext != null) mContext.unbindService(mServiceConn);
+            if (mContext != null && mIsBound) {
+                mContext.unbindService(mServiceConn);
+            }
         }
         mDisposed = true;
         mContext = null;
@@ -610,6 +617,7 @@
         checkSetupDone("queryInventory");
         flagStartAsync("refresh inventory");
         (new Thread(new Runnable() {
+            @Override
             public void run() {
                 IabResult result = new IabResult(BILLING_RESPONSE_RESULT_OK, "Inventory refresh successful.");
                 Inventory inv = null;
@@ -626,6 +634,7 @@
                 final Inventory inv_f = inv;
                 if (!mDisposed && listener != null) {
                     handler.post(new Runnable() {
+                        @Override
                         public void run() {
                             listener.onQueryInventoryFinished(result_f, inv_f);
                         }
@@ -946,6 +955,7 @@
         final Handler handler = new Handler();
         flagStartAsync("consume");
         (new Thread(new Runnable() {
+            @Override
             public void run() {
                 final List<IabResult> results = new ArrayList<IabResult>();
                 for (Purchase purchase : purchases) {
@@ -961,6 +971,7 @@
                 flagEndAsync();
                 if (!mDisposed && singleListener != null) {
                     handler.post(new Runnable() {
+                        @Override
                         public void run() {
                             singleListener.onConsumeFinished(purchases.get(0), results.get(0));
                         }
@@ -968,6 +979,7 @@
                 }
                 if (!mDisposed && multiListener != null) {
                     handler.post(new Runnable() {
+                        @Override
                         public void run() {
                             multiListener.onConsumeMultiFinished(purchases, results);
                         }
